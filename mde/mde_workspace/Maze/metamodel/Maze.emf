@namespace(uri="geodes.sms.maze", prefix="mz")
package Maze;

@gmf.diagram(model.extension="mz")
class MazeDiagram {
	val RectangleGenerator[1] rectangleGen;
	val ForcePatternGenerator[1] forcePatternGen;
	val SolutionPathGenerator[1] solutionPathGen;
	val MazeBodyGenerator[1] mazeBodyGen;
	readonly id attr String name = "MDiagram";
}

class Point {
	attr int x;
	attr int y;
}

class Count {
	attr int value;
}

class Rate {
	attr int value;
}

@gmf.node(color="245,197,66", figure="rounded", label.icon="false", label="type", size="40,40")
class MazeCell {
	attr int type;
	readonly id attr String name = "MC";

	@gmf.compartment
	val CellPoint[1] point;
}

@gmf.node(color="245,197,66", figure="rounded", label.icon="false", label="name", size="40,40")
class StartPoint extends Point {
	readonly id attr String name = "SP";
}

@gmf.node(color="245,197,66", figure="rounded", label.icon="false", label="name", size="40,40")
class EndPoint extends Point {
	readonly id attr String name = "EP";
}

@gmf.node(color="245,197,66", figure="rounded", label.icon="false", label="name", size="40,40")
class CellPoint extends Point {
	readonly id attr String name = "CP";
}

@gmf.node(color="255,102,102", figure="rounded", label.icon="false", label="name", size="40,40")
class ColumnCount extends Count {
	readonly id attr String name = "CC";
}

@gmf.node(color="255,102,102", figure="rounded", label.icon="false", label="name", size="40,40")
class RowCount extends Count {
	readonly id attr String name = "RC";
}

@gmf.node(color="128,159,255", figure="rectangle", label.icon="false", label="name", size="100,40")
class RectangleGenerator {

	@gmf.link(target.decoration="arrow", source.decoration="none", style="solid", color="0,0,0")
	ref ForcePatternGenerator[1] fpg;

	@gmf.compartment
	val RowCount[1] rc;

	@gmf.compartment
	val ColumnCount[1] cc;
	readonly id attr String name = "RGen";
}

@gmf.node(color="128,159,255", figure="rectangle", label.icon="false", label="name", size="100,40")
class ForcePatternGenerator {

	@gmf.link(target.decoration="arrow", source.decoration="none", style="solid", color="0,0,0")
	ref SolutionPathGenerator[1] spg;

	@gmf.compartment
	val MazeCell[*] mazeCells;
	readonly id attr String name = "FPGen";
}

@gmf.node(color="128,159,255", figure="rectangle", label.icon="false", label="name", size="100,40")
class SolutionPathGenerator {

	@gmf.link(target.decoration="arrow", source.decoration="none", style="solid", color="0,0,0")
	ref MazeBodyGenerator[1] mbg;

	@gmf.compartment
	val TurnRate[1] tr;

	@gmf.compartment
	val StraightRate[1] sr;

	@gmf.compartment
	val DecisionsRate[1] dr;

	@gmf.compartment
	val StartPoint[1] sp;

	@gmf.compartment
	val EndPoint[1] ep;
	readonly id attr String name = "SPGen";
}

@gmf.node(color="128,159,255", figure="rectangle", label.icon="false", label="name", size="100,40")
class MazeBodyGenerator {

	@gmf.compartment
	val DecisionsRate[1] dr;

	@gmf.compartment
	val StraightRate[1] sr;

	@gmf.compartment
	val TurnRate[1] tr;

	@gmf.compartment
	val EndRate[1] er;
	readonly id attr String name = "MBGen";
}

@gmf.node(color="33,224,133", figure="ellipse", label.icon="false", label="name", size="50,50")
class TurnRate extends Rate {
	readonly id attr String name = "TR";
}

@gmf.node(color="33,224,133", figure="ellipse", label.icon="false", label="name", size="50,50")
class StraightRate extends Rate {
	readonly id attr String name = "SR";
}

@gmf.node(color="33,224,133", figure="ellipse", label.icon="false", label="name", size="50,50")
class DecisionsRate extends Rate {
	readonly id attr String name = "DR";
}

@gmf.node(color="33,224,133", figure="ellipse", label.icon="false", label="name", size="50,50")
class EndRate extends Rate {
	readonly id attr String name = "ER";
}

